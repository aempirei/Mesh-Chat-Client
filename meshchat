#!/usr/bin/ruby
# Mesh Chat Client 1.0 (meshchat-1.0)
# Copyright(c) 2011 by Christopher Abad
# mailto:aempirei@gmail.com
# aim:goim?screenname=ambient+empire
# http://www.twentygoto10.com
# git://github.com/aempirei/Mesh-Chat-Client.git

require 'rubygems'
require 'getoptlong'
require 'socket'
require 'etc'
require 'readline'

PROGRAM = 'Mesh Chat Client'
VERSION = '1.0'
ARG0 = File.basename(__FILE__)

#
# the user class, which represents all the data on other users that can be collected
#

class User
	attr_accessor :username
   attr_accessor :visible
   attr_accessor :online
   attr_accessor :idle
   attr_accessor :age
   attr_accessor :distance
   attr_accessor :friend
   attr_accessor :friend_request
end

class MeshCodes

	CODEMAP = {
		"000" => :MCSERVER,
		"001" => :MCMOTD,
		"002" => :MCNAME,
		"003" => :MCCREATED,
		"004" => :MCVERIFIED,
		"051" => :MCNEWUSER,
		"052" => :MCNEWPASS,
		"061" => :MCFRIEND,
		"062" => :MCREQUEST,
		"063" => :MCANTI,
		"064" => :MCDISTANCE,
		"065" => :MCRREQUEST,
		"066" => :MCRANTI,
		"067" => :MCWHOIS,
		"080" => :MCBEGIN,
		"081" => :MCEND,
		"099" => :MCGOODBYE,
		"101" => :MCPARAMS,
		"102" => :MCMSG,
		"103" => :MCCMD,
		"104" => :MCUSERINV,
		"105" => :MCUNIMPL,
		"106" => :MCUSERUNK,
		"107" => :MCNOSELF,
		"108" => :MCNODUPES,
		"109" => :MCUSEROFF,
		"201" => :MCNEEDUSER,
		"202" => :MCNEEDPASS,
		"203" => :MCLOGIN,
		"301" => :MCUSER,
		"302" => :MCPASS,
		"303" => :MCRESET
	}

	def MCSERVER(msg) ; end
	def MCMOTD(msg) ; end
	def MCNAME(msg) ; end
	def MCCREATED(msg) ; end
	def MCVERIFIED(msg) ; end
	def MCNEWUSER(msg) ; end
	def MCNEWPASS(msg) ; end
	def MCFRIEND(msg) ; end
	def MCREQUEST(msg) ; end
	def MCANTI(msg) ; end
	def MCDISTANCE(msg) ; end
	def MCRREQUEST(msg) ; end
	def MCRANTI(msg) ; end
	def MCWHOIS(msg) ; end
	def MCBEGIN(msg) ; end
	def MCEND(msg) ; end
	def MCGOODBYE(msg) ; end
	def MCPARAMS(msg) ; end
	def MCMSG(msg) ; end
	def MCCMD(msg) ; end
	def MCUSERINV(msg) ; end
	def MCUNIMPL(msg) ; end
	def MCUSERUNK(msg) ; end
	def MCNOSELF(msg) ; end
	def MCNODUPES(msg) ; end
	def MCUSEROFF(msg) ; end
	def MCNEEDUSER(msg) ; end
	def MCNEEDPASS(msg) ; end
	def MCLOGIN(msg) ; end
	def MCUSER(msg) ; end
	def MCPASS(msg) ; end
	def MCRESET(msg) ; end

end

#
# the MeshChat class should be a singleton class at $mesh which contains all the client state
#

class MeshChat < MeshCodes

	DFLSERVER = '127.0.0.1'
	DFLPORT = 30201
	MAXLINES = 1024

	attr_accessor :server
	attr_accessor :port

	attr_reader :socket
	attr_reader :servername
	attr_reader :motd
	attr_reader :users
   attr_reader :width
   attr_reader :height
   attr_reader :lines

	attr_reader :code_procs

	def initialize
		@server = DFLSERVER
		@port = DFLPORT
      @users = []
      @width, @height = screensize
      @lines = []
	end

   def startup

      # register at_exit

      Kernel.at_exit do
         puts "executing exit proceedure"
         @socket.close unless @socket.nil?
      end

      # connect socket

      @socket.close unless @socket.nil?

      begin
         @socket = TCPSocket.open($mesh.server, $mesh.port)
      rescue Exception => e
         puts "caught exception " + e.to_s 	
         exit
      end

      # register SIGINT handler

      Kernel.trap('INT') do |signo|
         Kernel.trap(signo, 'SIG_IGN')
         puts "captured interrupt, exiting"
         exit
      end

      return true
   end

   def readline_ready?
      return true
   end

   def socket_ready?
      return ( not @socket.nil? )
   end

   def gotoxy(x,y)
      printf("\33[%d;%dH", y + 1, x + 1)
   end

   def clreol
      print "\33[2K"
   end

   def clrscr
      print "\33[2J"
   end

   def pushpos
      print "\33[s"
   end

   def poppos
      print "\33[u"
   end

   def screensize

      # this way sucks, but oh well

      return [ `tput cols`.to_i, `tput lines`.to_i ]
   end

   def do_readline

      line = Readline.readline("\33[#{@height};1H> ", true)

      return if(line.nil? or line.empty?)

      if(line =~ /^\/(\w+)(?:\s+(.*))?$/)

         command = $1.upcase
         data = ($2.nil? ? '' : ' ' + $2)
         @socket.print(command + ' ' + data + "\n")

      else
         @socket.print('SAY :' + line + "\n")
      end

   end

	def set_header
	end

	def set_footer
	end

	def do_code(code,codestr,codemsg)

			if(CODEMAP.has_key? code)
				add_line "HAS #{code} AT #{CODEMAP[map]}"
				# CODEMAP[code].call(codestr, codemsg)
			else
         	add_line sprintf("UNKNOWN CODE: %s \"%s\" MSG: %s\n", code, codestr, codemsg)
			end
	end

   def do_socket

      line = @socket.gets
      
      return if line.nil?

      line.chop!

      if(line =~ /^@\s+(\w+)\s+(\d+)\s+([^:]*)(?:\s+:(.*))?$/)

         add_line sprintf("USERNAME: %s DISTANCE: %d ACTION: %s MESSAGE: %s\n", $1, $2.to_i, $3, $4)

      elsif(line =~ /^(\d{3})\s+([^:]*)(?:\s+:(.*))?$/)

			code,codestr,codemsg = [$1,$2,$3]

			do_code(code,codestr,codemsg)

      else

         add_line sprintf("UNKNOWN LINE: %s\n", line)

      end

		refresh

   end

	def add_line(line)

		@lines << line

		@lines = @lines.slice(-MAXLINE, MAXLINES) if @lines.size > MAXLINES
	end

	def refresh

      pushpos

      range = 0...(@height - 1)

      range.each do |lineno|
         gotoxy(0, @height - 1 - lineno)
         clreol
         print @lines[-lineno].slice(0,@width) if not @lines[-lineno].nil?
      end

      poppos
	end

end

$mesh = MeshChat.new

#
# command-line options definition block
#

OPTIONS = [
	[ [ '--server' , '-s', GetoptLong::REQUIRED_ARGUMENT ], :server, 'server address' ],
	[ [ '--port'   , '-p', GetoptLong::REQUIRED_ARGUMENT ], :port  , 'server port'    ],
	[ [ '--help'   , '-h', GetoptLong::NO_ARGUMENT       ], nil    , 'help'           ],
	[ [ '--version', '-V', GetoptLong::NO_ARGUMENT       ], nil    , 'version'        ]
]

#
# the usage function which prints out the usage when --help is invoked
#

def usage

	width = 20

	print "\n"
	
	version()

	print "\nusage: " + ARG0 + " [options]\n\n"

	OPTIONS.each do |option,arg,desc|

		( long, short, params ) = option
		
		str = [ long, short ].compact.join(', ') + ' '
		str += arg.to_s.upcase unless arg.nil?

		printf("\t%-*s%s", width, str, desc)
		printf(' (default: %s)', $mesh.send(arg)) unless arg.nil?
		print "\n"
	end

	print "\n"

end


# the version function which prints the client version when --version or --help is invoked
#

def version
	puts PROGRAM + ' ' + VERSION
end

#
# proccess the command-line options
#

opts = GetoptLong.new(*OPTIONS.map { |x| x.first })

opts.each do |opt,arg|
	case opt
		when '--server'
			$mesh.server = arg
		when '--port'
			$mesh.port = arg
		when '--help'
			usage()
			exit
		when '--version'
			version()
			exit
	end
end

#
# make socket connection -- this client is pretty basic
#

$mesh.startup

tl = Thread.new do
   until $mesh.socket.closed?
      if $mesh.socket_ready?
         $mesh.do_socket
      end
   end
end

until $mesh.socket.closed?
   if $mesh.readline_ready?
      $mesh.do_readline
   end
end

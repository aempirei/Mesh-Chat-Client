#!/usr/bin/ruby
# Mesh Chat Client 1.0 (meshchat-1.0)
# Copyright(c) 2011 by Christopher Abad
# mailto:aempirei@gmail.com
# aim:goim?screenname=ambient+empire
# http://www.twentygoto10.com
# git://github.com/aempirei/Mesh-Chat-Client.git

require 'rubygems'
require 'getoptlong'
require 'socket'
require 'etc'
require 'readline'

PROGRAM = 'Mesh Chat Client'
VERSION = '1.0'
ARG0 = File.basename(__FILE__)

#
# the user class, which represents all the data on other users that can be collected
#

class User
	attr_accessor :username
   attr_accessor :visible
   attr_accessor :online
   attr_accessor :idle
   attr_accessor :age
   attr_accessor :distance
   attr_accessor :friend
   attr_accessor :friend_request
end

#
# the MeshChat class should be a singleton class at $mesh which contains all the client state
#

class MeshChat

	DFLSERVER = '127.0.0.1'
	DFLPORT = 30201

	attr_accessor :server
	attr_accessor :port

	attr_reader :socket
	attr_reader :servername
	attr_reader :motd
	attr_reader :users

	def initialize
		@server = DFLSERVER
		@port = DFLPORT
      @users = []
	end

   def startup

      # register at_exit

      Kernel.at_exit do
         puts "executing exit proceedure"
         @socket.close unless @socket.nil?
      end

      # connect socket

      @socket.close unless @socket.nil?

      begin
         @socket = TCPSocket.open($mesh.server, $mesh.port)
      rescue Exception => e
         puts "caught exception " + e.to_s 	
         exit
      end

      # register SIGINT handler

      Kernel.trap('INT') do |signo|
         Kernel.trap(signo, 'SIG_IGN')
         puts "captured interrupt, exiting"
         exit
      end

      return true
   end

   def readline_ready?
      return true
   end

   def socket_ready?
      return ( not @socket.nil? )
   end

   def do_readline
      line = Readline.readline('> ', true)

      if(line =~ /^\/(\w+)(?:\s+(.*))?$/)
         command = $1.upcase
         data = $2
      else
         command = 'SAY'
         data = line
      end

      printf("COMMAND: %s DATA: %s\n", command, data)
   end

   def do_socket

      line = @socket.gets.chop

      if(line =~ /^@\s+(\w+)\s+(\d+)\s+(\w+)\s*(?:\s+:(.*))?$/)
         printf("USERNAME: %s DISTANCE: %d ACTION: %s MESSAGE: %s\n", $1, $2.to_i, $3, $4)
      elsif(line =~ /^(\d{3})\s+([^:]*)(?:\s+:(.*))?$/)
         printf("CODE: %s PARAMS: %s MSG: %s\n", $1, $2, $3)
      else
         printf("UNKNOWN LINE: %s\n", line)
      end
   end

end

$mesh = MeshChat.new

#
# command-line options definition block
#

OPTIONS = [
	[ [ '--server' , '-s', GetoptLong::REQUIRED_ARGUMENT ], :server, 'server address' ],
	[ [ '--port'   , '-p', GetoptLong::REQUIRED_ARGUMENT ], :port  , 'server port'    ],
	[ [ '--help'   , '-h', GetoptLong::NO_ARGUMENT       ], nil    , 'help'           ],
	[ [ '--version', '-V', GetoptLong::NO_ARGUMENT       ], nil    , 'version'        ]
]

#
# the usage function which prints out the usage when --help is invoked
#

def usage

	width = 20

	print "\n"
	
	version()

	print "\nusage: " + ARG0 + " [options]\n\n"

	OPTIONS.each do |option,arg,desc|

		( long, short, params ) = option
		
		str = [ long, short ].compact.join(', ') + ' '
		str += arg.to_s.upcase unless arg.nil?

		printf("\t%-*s%s", width, str, desc)
		printf(' (default: %s)', $mesh.send(arg)) unless arg.nil?
		print "\n"
	end

	print "\n"

end

#
# the version function which prints the client version when --version or --help is invoked
#

def version
	puts PROGRAM + ' ' + VERSION
end

#
# proccess the command-line options
#

opts = GetoptLong.new(*OPTIONS.map { |x| x.first })

opts.each do |opt,arg|
	case opt
		when '--server'
			$mesh.server = arg
		when '--port'
			$mesh.port = arg
		when '--help'
			usage()
			exit
		when '--version'
			version()
			exit
	end
end

#
# make socket connection -- this client is pretty basic
#

$mesh.startup

while true
   if $mesh.readline_ready?
      $mesh.do_readline
   end

   if $mesh.socket_ready?
      $mesh.do_socket
   end
end

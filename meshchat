#!/usr/bin/env ruby
# Mesh Chat Client 1.0 (meshchat-1.0)
# Copyright(c) 2011 by Christopher Abad
# mailto:aempirei@gmail.com
# aim:goim?screenname=ambient+empire
# http://www.twentygoto10.com
# git://github.com/aempirei/Mesh-Chat-Client.git

require 'rubygems'
require 'getoptlong'
require 'socket'
require 'etc'
require 'readline'

PROGRAM = 'Mesh Chat Client'
VERSION = '1.0'
ARG0 = File.basename(__FILE__)

#
# the user class, which represents all the data on other users that can be collected
#

class User
	attr_accessor :username
   attr_accessor :visible
   attr_accessor :online
   attr_accessor :idle
   attr_accessor :age
   attr_accessor :distance
   attr_accessor :friend
   attr_accessor :friend_request
end

class MeshCodes

	CODEMAP = {
		"000" => :MCSERVER,
		"001" => :MCMOTD,
		"002" => :MCNAME,
		"003" => :MCCREATED,
		"004" => :MCVERIFIED,
		"051" => :MCNEWUSER,
		"052" => :MCNEWPASS,
		"061" => :MCFRIEND,
		"062" => :MCREQUEST,
		"063" => :MCANTI,
		"064" => :MCDISTANCE,
		"065" => :MCRREQUEST,
		"066" => :MCRANTI,
		"067" => :MCWHOIS,
		"070" => :MCHELP,
		"080" => :MCBEGIN,
		"081" => :MCEND,
		"099" => :MCGOODBYE,
		"101" => :MCPARAMS,
		"103" => :MCCMD,
		"104" => :MCUSERINV,
		"105" => :MCUNIMPL,
		"106" => :MCUSERUNK,
		"107" => :MCNOSELF,
		"108" => :MCNODUPES,
		"109" => :MCUSEROFF,
		"201" => :MCNEEDUSER,
		"202" => :MCNEEDPASS,
		"203" => :MCLOGIN,
		"301" => :MCUSER,
		"302" => :MCPASS,
		"303" => :MCRESET
	}

	REVERSEMAP = CODEMAP.invert

	OPTIONAL = [ :MCREQUEST, :MCRREQUEST ]

	attr_reader :buffers

	def initialize
		@buffers = {}
	end

	def MCSERVER(msg)
		@version = msg
	end

	def MCMOTD(msg)
		@motd = msg
	end

	def MCNAME(msg)
		@servername = msg
	end

	def MCCREATED(msg) ; end

	def MCVERIFIED(msg)
		@user.username = msg
	end

	def MCNEWUSER(msg)
		@user.username = msg
	end

	def MCNEWPASS(msg) ; end

	def handle_group(method, pair)
	 	if @buffers.has_key? REVERSEMAP[method]
			@buffers[REVERSEMAP[method]] << pair
			return false
		else
			return true
		end
	end

	def MCFRIEND(msg)
		return handle_group( __method__, [msg, false] )
	end

	def MCREQUEST(msg)
		return handle_group( __method__, [msg, false] )
	end

	def MCANTI(msg) ; end

	def MCDISTANCE(msg)
		return handle_group( __method__, msg.split(/\s+/, 2).reverse )
	end

	def MCRREQUEST(msg)
		return handle_group( __method__, [msg, false] )
	end

	def MCRANTI(msg) ; end

	def MCWHOIS(msg)
		return handle_group( __method__,  msg.split(/\s+/, 2) )
	end

	def MCBEGIN(msg)
		@buffers[msg] = []
		return false
	end

	def MCEND(msg)

		if @buffers.has_key? msg

			if @buffers[msg].empty? and ( OPTIONAL.member? CODEMAP[msg] )

				# dont bother showing anything if this block is optional

			else

				maxparam = @buffers[msg].map { |k,v| k.length }.max

				maxparam ||= 0

				lines = @buffers[msg].map do |k,v|
					if v == false
						k
					else
						sprintf("%*s: %s", maxparam, k, v)
					end
				end

				header = sprintf("%s--[%s %s %s]%s", fgcolor(5), CLRFMT, CODEMAP[msg].to_s.match(/^MC(.*)/)[1].downcase, fgcolor(5), CLRFMT)

				hl = header.length - 2 * (fgcolor(5) + CLRFMT).length
		
				width = ( lines.map { |x| x.length } + [15, hl] ).max

				header += fgcolor(5) + ( '-' * (width - hl) ) + CLRFMT

				footer = fgcolor(5) + '-' * width + CLRFMT

				header = fgcolor(5) + header + CLRFMT

				add_line header

				lines.each { |x| add_line x }

				add_line footer

			end

			@buffers.delete msg

			return false
		end
	end

	def MCGOODBYE(msg)
		@socket.close
	end

	def MCPARAMS(msg) ; end
	def MCMSG(msg) ; end
	def MCCMD(msg) ; end
	def MCUSERINV(msg) ; end
	def MCUNIMPL(msg) ; end
	def MCUSERUNK(msg) ; end
	def MCNOSELF(msg) ; end
	def MCNODUPES(msg) ; end
	def MCUSEROFF(msg) ; end
	def MCNEEDUSER(msg) ; end
	def MCNEEDPASS(msg) ; end
	def MCLOGIN(msg) ; end
	def MCUSER(msg) ; end
	def MCPASS(msg) ; end
	def MCRESET(msg) ; end
	def MCHELP(msg)
		return handle_group( __method__, [msg, false] )
	end

end

#
# the MeshChat class should be a singleton class at $mesh which contains all the client state
#

CLRLIN = "\33[2K"
CLREOL = "\33[K"
CLRSCR = "\33[2J"
CLRFMT = "\33[0m"
BOLD = "\33[1m"
CURON = "\33[?25h"
CUROFF = "\33[?25l"
SCROLL = "\33" + 'D'
CLRSCROLL = "\33[r"

class MeshChat < MeshCodes

	DFLSERVER = '127.0.0.1'
	DFLPORT = 30201
	MAXLINES = 1024

	attr_accessor :server
	attr_accessor :port

	attr_reader :user
	attr_reader :socket
	attr_reader :servername
	attr_reader :version
	attr_reader :motd
	attr_reader :users
   attr_reader :width
   attr_reader :height
   attr_reader :lines

	attr_reader :code_procs

	def initialize

		super

		@server = DFLSERVER
		@port = DFLPORT
      @users = []
      @lines = []
		@user = User.new
      @width, @height = screensize
	end

   def startup

      # connect socket

      @socket.close unless @socket.nil?

      begin
         @socket = TCPSocket.open($mesh.server, $mesh.port)
      rescue Exception => e
         puts "caught exception " + e.to_s 	
         exit
      end

      # register at_exit

      Kernel.at_exit do
         add_line "exiting"
         @socket.close unless ( @socket.nil? or @socket.closed? )
			 print CLRSCROLL + CLRFMT + posxy(0,@height-1) + CLREOL
      end

      # register SIGINT handler

      Kernel.trap('INT') do |signo|
         Kernel.trap(signo, 'SIG_IGN')
         add_line "captured interrupt, exiting"
         exit
      end

		print CLRSCR + setscroll(2, @height - 2)

      return true
   end

   def readline_ready?
      return true 
   end

   def socket_ready?
      return ( not @socket.nil? )
   end

	def escapecode(values, ch)
		return sprintf("\33[%s%s", values.join(';'), ch)
	end

	def posxy(x,y)
		return escapecode([y+1,x+1], 'H')
	end

   def gotoxy(x,y)
		print posxy(x,y)
   end

	def fgcolor(fg)
		codes = []
		codes << 1 if(fg >= 8)
		codes << 30 + (fg % 8)
		return escapecode(codes, 'm')
	end

	def bgcolor(bg)
		codes = []
		codes << 5 if(bg >= 8)
		codes << 40 + (bg % 8)
		return escapecode(codes, 'm')
	end

	def setscroll(first, last)
		return escapecode([first,last], 'r')
	end

	def color(fg,bg)
		codes = []
		codes << 1 if(fg >= 8)
		codes << 5 if(bg >= 8)
		codes << 40 + (bg % 8)
		codes << 30 + (fg % 8)
		return escapecode(codes, 'm')
	end

   def pushpos
      print "\33[s"
   end

   def poppos
      print "\33[u"
   end

   def screensize

      # this way sucks, but oh well

      return [ `tput cols`.to_i, `tput lines`.to_i ]
   end

   def do_readline

      line = Readline.readline(posxy(0, @height-1) + CLRLIN + '> ', true)

      return if(line.nil? or line.empty?)

      if(line =~ /^\/(\w+)(?:\s+(.*))?$/)

         command = $1.upcase
         data = ($2.nil? ? '' : ' ' + $2)
         @socket.print(command + ' ' + data + "\n")

      else
         @socket.print('SAY :' + line + "\n")
      end

   end

	def do_code(code,codestr,codemsg)

			if(CODEMAP.has_key? code)
				unless send(CODEMAP[code], codemsg) === false
					add_line sprintf("%s%s",codestr, codemsg.nil? ? '' : " (#{codemsg})")
				end
			else
        		add_line sprintf("UNKNOWN CODE: %s \"%s\" MSG: %s", code, codestr, codemsg)
			end
	end

	def hue(distance)
		return case distance
			when 0
				fgcolor(4 + 8)
			when 1
				fgcolor(7 + 8)
			when 2
				fgcolor(7)
			when 3
				fgcolor(0 + 8)
			else
		end
	end

	def do_action(username,distance,action,message)

		username = fgcolor(3 + 8) + username + CLRFMT if username == @user.username

		case action
			when 'say'
				add_line sprintf("%s" + fgcolor(2) + ":" + CLRFMT + " %s%s" + CLRFMT, username, hue(distance), message)
			else
				add_line sprintf("%s by %s %s%s" + CLRFMT, action, username, hue(distance), message)
		end	

	end

   def do_socket

      line = @socket.gets
      
      if line.nil?
			add_line "server disconnected"
			@socket.close
			return false
		end

      line.chop!

      if(line =~ /^@\s+(\w+)\s+(\d+)\s+(.*?)\s*(?::(.*))?$/)

			username,distance,action,message = $1, $2.to_i, $3, $4

			do_action(username,distance,action,message)

      elsif(line =~ /^(\d{3})\s+([^:]*)(?:\s+:(.*))?$/)

			code,codestr,codemsg = [$1,$2,$3]

			do_code(code,codestr,codemsg)

      else

         add_line sprintf("UNKNOWN LINE: %s", line)

      end

		refresh

		return true

   end

	def add_line(line)

		refresh

		line.chomp!

		maxlineno = @height - 3

      pushpos

      print CUROFF

      gotoxy(0, maxlineno)

		print SCROLL

      print line

      poppos

		print CURON

		STDOUT.flush

		@lines.unshift line

		@lines = @lines.slice(0, MAXLINES) if @lines.size > MAXLINES
	end

	def refresh_header

		gotoxy(0,0)

		header_str = sprintf(" %s ~ %s" + CLREOL, @servername, @motd)

		printf("%s%-*s%s", color(0,5), @width, header_str, CLRFMT)
	end

	def refresh_footer

		gotoxy(0,@height - 2)

		footer_str = sprintf(" %s ~ %s:%s ~ %s" + CLREOL, @user.username, @server, @port, @version)

		printf("%s%-*s%s", color(0,5), @width, footer_str, CLRFMT)
	end

	def refresh

		maxlineno = @height - 3

      pushpos

		print CUROFF

		refresh_header

		refresh_footer

      poppos

		print CURON

		STDOUT.flush

	end

end

$mesh = MeshChat.new

#
# command-line options definition block
#

OPTIONS = [
	[ [ '--server' , '-s', GetoptLong::REQUIRED_ARGUMENT ], :server, 'server address' ],
	[ [ '--port'   , '-p', GetoptLong::REQUIRED_ARGUMENT ], :port  , 'server port'    ],
	[ [ '--help'   , '-h', GetoptLong::NO_ARGUMENT       ], nil    , 'help'           ],
	[ [ '--version', '-V', GetoptLong::NO_ARGUMENT       ], nil    , 'version'        ]
]

#
# the usage function which prints out the usage when --help is invoked
#

def usage

	width = 20

	print "\n"
	
	version()

	print "\nusage: " + ARG0 + " [options]\n\n"

	OPTIONS.each do |option,arg,desc|

		( long, short, params ) = option
		
		str = [ long, short ].compact.join(', ') + ' '
		str += arg.to_s.upcase unless arg.nil?

		printf("\t%-*s%s", width, str, desc)
		printf(' (default: %s)', $mesh.send(arg)) unless arg.nil?
		print "\n"
	end

	print "\n"

end


# the version function which prints the client version when --version or --help is invoked
#

def version
	puts PROGRAM + ' ' + VERSION
end

#
# proccess the command-line options
#

opts = GetoptLong.new(*OPTIONS.map { |x| x.first })

opts.each do |opt,arg|
	case opt
		when '--server'
			$mesh.server = arg
		when '--port'
			$mesh.port = arg
		when '--help'
			usage()
			exit
		when '--version'
			version()
			exit
	end
end

#
# make socket connection -- this client is pretty basic
#

$mesh.startup

tl = Thread.new do

   until $mesh.socket.closed?
      if $mesh.socket_ready?
			$mesh.do_socket
      end
   end

	exit
end

until $mesh.socket.closed?
   if $mesh.readline_ready?
      $mesh.do_readline
   end
end
